'use strict';

// –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è

let weatherMap = new Map([
	['London', 10],
	['Moscow', 7],
	['Paris', 14]
])

let temp = 0;
const stop = weatherMap.size;

for (let [key, value] of weatherMap) { 
	temp++;
	weatherMap.set(value, key);
	weatherMap.delete(key);
	if (temp === stop) {
		break
	}
}

console.log(weatherMap)

//–°–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç min –∏ max –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–∂–¥—É –Ω–∏–º–∏

const min = 1;
const max = 20;

function randomNumber(min, max) {
	const scale = Math.random();
	return Math.floor(scale * (max - min + 1) + min)

}

randomNumber(min, max)

// –°–¥–µ–ª–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç

function currencyConverter(amount, initialCurrency, targetCurrency) {
	const curRub = {
		style: 'currency',
		currency: 'RUB'
	}
	const curUsd = {
		style: 'currency',
		currency: 'USD'
	}
	const curEur = {
		style: 'currency',
		currency: 'EUR'
	}
	switch (initialCurrency) {
		case 'RUB': switch (targetCurrency) {
			case 'USD': return new Intl.NumberFormat('ru-RU', curUsd).format(amount / 89.7619);
			case 'EUR': return new Intl.NumberFormat('ru-RU', curEur).format(amount / 97.9126);
			default: return null;
		}
		case 'USD': switch (targetCurrency) {
			case 'RUB': return new Intl.NumberFormat('en-US', curRub).format(amount * 89.7619);
			case 'EUR': return new Intl.NumberFormat('en-US', curEur).format(amount * 0.9168);
			default: return null;
		}
		case 'EUR': switch (targetCurrency) {
			case 'RUB': return new Intl.NumberFormat('en-EN', curRub).format(amount * 97.9126);
			case 'USD': return new Intl.NumberFormat('en-EN', curUsd).format(amount * 1.0908);
			default: return null;
		}
		default:
			return null;
	}
}

console.log(currencyConverter(1000, 'RUB', 'EUR'));

// –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

const user = {
	name: 'Vasya',
	birthday: '01/11/2024'
}

function checkBirthday(user) {
	const now = new Date(Date.now());
	const bd = new Date(user.birthday);
	return now.getMonth() == bd.getMonth() && now.getDate() == bd.getDate()
};

console.log(checkBirthday(user))

// –¢–∞–π–º–µ—Ä –ø–∏—Ü—Ü—ã –°–¥–µ–ª–∞—Ç—å —Ç–∞–π–º–µ—Ä –ø–∏—Ü—Ü—ã (—Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –≤—Ä–µ–º—è),
// –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —Å–µ–∫—É–Ω–¥—ã, –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–∏—Ü—Ü—ã
// –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏. 00:04 00:03 00:02 00:01 00:00 üçï!!!

function pizzaReadyIn(time) {
	const now = Date.now();
	let newTime = now + time;
	const options = {
		second: "numeric",
		minute: "numeric",
	};
	const interval = setInterval(() => {
		console.log(new Intl.DateTimeFormat('ru-RU', options).format(newTime + 100 - Date.now()));
	}, 1000)
	setTimeout(() => {
		clearInterval(interval);
		console.log('üçï!!!')
	}, time)
}

pizzaReadyIn(5000)

/*–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞—Ö –∫–æ—Ä–∑–∏–Ω—É —Ç–æ–≤–∞—Ä–æ–≤ —Å –º–µ—Ç–æ–¥–∞–º–∏
-  –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
-  –£–≤–µ–ª–∏—á–∏—Ç—å —á–∏—Å–ª–æ —Ç–æ–≤–∞—Ä–æ–≤
-  –£–º–µ–Ω—å—à–∏—Ç—å —á–∏—Å–ª–æ —Ç–æ–≤–∞—Ä–æ–≤ (—É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –∏—Ö 0)*/

const Basket = function () {
	this.products = [];
}
Basket.prototype.add = function (product) {
	for (const good of this.products) {
		if (good.id === product.id) {
			this.plus(product)
			return
		}
	}
	this.products.push(product)
}
Basket.prototype.plus = function (product) {
	for (const good of this.products) {
		if (good.id === product.id) {
			good.count += 1;
			break
		}
	}
}
Basket.prototype.minus = function (product) {
	for (const good of this.products) {
		if (good.id === product.id) {
			good.count -= 1;
			if (good.count === 0) {
				this.products.splice(this.products.indexOf(good), 1)
			};
			break
		}
	}
}

const product = { id: 1, name: 'Bread', count: 1 }
const basket = new Basket()
basket.add(product)
basket.add(product)
console.log(basket)

/* –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
- –ª–æ–≥–∏–Ω
- –ø–∞—Ä–æ–ª—å
–ü—Ä–∏—á–µ–º –ø–∞—Ä–æ–ª—å –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è –∏ –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è.
–ü–∞—Ä–æ–ª—å –∏ –ª–æ–≥–∏–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è. –¢–∞–∫ –∂–µ —É –∫–ª–∞—Å—Å–∞ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥—ã
- –°–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è (–ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å)
- –°–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è */

class User {
	#login;
	#password;
	constructor(login, password) {
		this.#login = login;
		this.#password = password.split('').reverse().join('')
	}
	#ChangePasswordPr(newPassword) {
		this.#password = newPassword.split('').reverse().join('');
		console.log(`–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newPassword}`)
	}

	changePassword(password, newPassword) {
		if (this.checkPassword(password)) {
			this.#ChangePasswordPr(newPassword)
		}
	}

	checkPassword(password) {
		return password === this.#password.split('').reverse().join('');
	}

	get login() {
		return this.#login
	}
}

let user1 = new User('1@1', 'erhw43d')

console.log(user1)

user1.changePassword('erhw43d', 'dffr$f')

console.log(user1.checkPassword('erhw43d'))

